extends layout

block content
  div#renderer

  style.
    body,html{
      width : 100%;
      height : 100%;
      margin : 0px;
      padding : 0px;
    }

    #renderer {
      width : 100%;
      height : 100%;
    }

    svg > rect{
      margin : auto auto;
    }



  script(src="//code.jquery.com/jquery.min.js")
  script(src='//d3js.org/d3.v3.min.js')

  script.
    var init = init()

    var rect = init.root.append('rect').attr({
      x : init.padding,
      y : init.padding,
      width : init.graphW,
      height : init.graphH,
      fill : 'rbg(204,204,204)'
    })

    var data = []

    var lineDrawFunction = d3.svg.line()
            .x(function (d) {return d.x;})
            .y(function (d) {return d.y;})
            .interpolate('linear');

    var initLine = drawGuideLines(init, lineDrawFunction, lineDrawFunction)

    makeRandomData(data, initLine, init)
    /*drawParallelCordinateLine(data, init, lineDrawFunction)*/







    /* user define function */
    function init(){
      var root = d3.select('#renderer').append('svg').attr({
        width: '100%',
        height: '100%'
      })

      var width = document.getElementById('renderer').offsetWidth
      var height = document.getElementById('renderer').offsetHeight
      var padding = 50

      return {
        root : root,
        width : width,
        height : height,
        padding : padding,
        graphW : width - (padding * 2),
        graphH : height - (padding * 2)
      }
    }


    function makeRandomData(data, initLine, init){
      for(var i=0; i<100; i++){

        var oneRaw = []

        for(var j=0; j<5; j++){
          oneRaw.push({
            x : (init.graphW/5*j) + init.padding + (init.graphW%5/2),
            y : Math.random() * (initLine.lastColumnLine - initLine.firstColumnLine) + initLine.firstColumnLine
          })
        }
        data.push(oneRaw)
      }
    }


    function drawGuideLines(init, lineDrawFunction){
      var innerPadding = 10

      var firstColumnLine = (init.graphH/10) + init.padding + (init.graphH%10/2)
      var lastColumnLine = (init.graphH/10*10) + init.padding + (init.graphH%10/2)

      var firstRowLine = (init.graphW/5) + init.padding + (init.graphW%5/2)
      var lastRowLine = (init.graphW/5*5) + init.padding + (init.graphW%5/2)

      /* Row guide Line */
      for(var i=0; i<10; i++){

        drawLine(init.root,
                 firstRowLine, (init.graphH/10*i) + init.padding + (init.graphH%10/2),
                 lastRowLine, (init.graphH/10*i) + init.padding + (init.graphH%10/2),
                 2, 'rgba(0,0,0,0.1)')
      }

      /* column guide Line */
      for(var i=0; i<5; i++){
        drawLine(
                 init.root,
                ((init.graphW - innerPadding)/4*i) + init.padding + ((init.graphW - innerPadding)%4/2), firstColumnLine,
                ((init.graphW - innerPadding)/4*i) + init.padding + ((init.graphW - innerPadding)%4/2), lastColumnLine,
                3, 'black')

      }

      return {
        firstRowLine : firstRowLine,
        lastRowLine : lastRowLine,
        firstColumnLine : firstColumnLine,
        lastColumnLine : lastColumnLine
      }
    }


    function drawLine(root, x1, y1, x2, y2, strokeWidth, stroke) {
      var line = root.append('line').attr({
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        strokeWidth: strokeWidth,
        stroke: stroke
      })
      return line
    }


    function drawParallelCordinateLine(data, init, lineDrawFunction){
      for(var i=0; i<data.length; i++){
        init.root.append('path').attr({
          d : lineDrawFunction(data[i]),
          stroke : '#cf3000',
          strokeWidth : 0.5,
          fill : 'none'
        })
      }
    }